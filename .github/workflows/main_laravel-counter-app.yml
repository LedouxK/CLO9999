# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Laravel app
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# √âviter les actions en double
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    uses: ./.github/workflows/action.yml
    secrets:
      AZURE_APP_NAME: ${{ secrets.AZURE_APP_NAME }}
      AZURE_PUBLISH_PROFILE: ${{ secrets.AZURE_PUBLISH_PROFILE }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      APP_KEY: ${{ secrets.APP_KEY }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Debug Secrets
        run: |
          echo "V√©rification de la pr√©sence des secrets:"
          echo "AZURE_APP_NAME est d√©fini: ${{ secrets.AZURE_APP_NAME != '' }}"
          echo "AZURE_PUBLISH_PROFILE est d√©fini: ${{ secrets.AZURE_PUBLISH_PROFILE != '' }}"
          echo "AZURE_CREDENTIALS est d√©fini: ${{ secrets.AZURE_CREDENTIALS != '' }}"
          echo "AZURE_TENANT_ID est d√©fini: ${{ secrets.AZURE_TENANT_ID != '' }}"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, zip
          coverage: none

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: 'composer.json'

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "APP_ENV=production" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=laravelmysqlsrv.mysql.database.azure.com" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=laraveldb" >> .env
          echo "DB_USERNAME=mysqladmin" >> .env
          echo "WEBSITE_DOCUMENT_ROOT=/home/site/wwwroot/public" >> .env

      - name: Set Laravel Permissions
        run: |
          chmod -R 755 storage bootstrap/cache
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;
          mkdir -p storage/framework/{sessions,views,cache}

      - name: Configure MySQL Firewall
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          # V√©rification d√©taill√©e des secrets
          echo "üîç V√©rification des secrets dans GitHub Actions..."
          echo "AZURE_CREDENTIALS est d√©fini: ${{ secrets.AZURE_CREDENTIALS != '' }}"
          echo "AZURE_APP_NAME est d√©fini: ${{ secrets.AZURE_APP_NAME != '' }}"
          echo "DB_PASSWORD est d√©fini: ${{ secrets.DB_PASSWORD != '' }}"
          
          # R√©cup√©rer l'IP publique de l'ex√©cuteur GitHub Actions
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "IP publique de l'ex√©cuteur: $PUBLIC_IP"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: V√©rification de la connexion Azure
        run: |
          echo "üîç V√©rification de la connexion Azure..."
          az account show
          
      - name: Configure MySQL Firewall Rule
        run: |
          # Ajouter une r√®gle de pare-feu temporaire pour GitHub Actions
          az mysql flexible-server firewall-rule create \
            --resource-group laravel-rg \
            --server-name laravelmysqlsrv \
            --name allow-github-actions \
            --start-ip-address $PUBLIC_IP \
            --end-ip-address $PUBLIC_IP

      - name: Run Migrations
        run: |
          php artisan migrate --force
          php artisan cache:table
          php artisan session:table

      - name: Remove MySQL Firewall Rule
        if: always()
        run: |
          # Suppression de la r√®gle de pare-feu
          az mysql flexible-server firewall-rule delete \
            --resource-group laravel-rg \
            --server-name laravelmysqlsrv \
            --name allow-github-actions \
            --yes

      - name: Clear Config
        run: |
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear
          php artisan event:clear

      - name: Optimize
        run: |
          php artisan optimize:clear
          php artisan optimize

      - name: Zip artifact for deployment
        run: zip release.zip ./* .env.example .deployment -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: ${{ secrets.AZURE_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: .

      - name: Verify Deployment
        run: |
          echo "üîç V√©rification du d√©ploiement..."
          echo "üìÇ URL de l'application: https://${{ secrets.AZURE_APP_NAME }}.azurewebsites.net"
          echo "üìÇ URL Kudu (SCM): https://${{ secrets.AZURE_APP_NAME }}.scm.azurewebsites.net"
          
          # V√©rifier les secrets
          echo "V√©rification des secrets:"
          echo "AZURE_APP_NAME est d√©fini: ${{ secrets.AZURE_APP_NAME != '' }}"
          echo "AZURE_PUBLISH_PROFILE est d√©fini: ${{ secrets.AZURE_PUBLISH_PROFILE != '' }}"
          echo "AZURE_CREDENTIALS est d√©fini: ${{ secrets.AZURE_CREDENTIALS != '' }}"
          echo "DB_PASSWORD est d√©fini: ${{ secrets.DB_PASSWORD != '' }}"
          
          # Attendre que l'application soit disponible
          sleep 30
          
          # V√©rifier si l'application r√©pond
          curl -I "https://${{ secrets.AZURE_APP_NAME }}.azurewebsites.net"
          
          # V√©rifier l'√©tat de MySQL
          echo "V√©rification de MySQL..."
          az mysql flexible-server show --name laravelmysqlsrv --resource-group laravel-rg

      - name: Force deployment if needed
        if: failure()
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          echo "‚ö†Ô∏è Tentative de d√©ploiement forc√©..."
          
          # Connexion √† Azure
          az login --service-principal \
            --username $AZURE_CREDENTIALS

          # D√©finir la subscription
          az account set --subscription $AZURE_SUBSCRIPTION_ID
          
          # Forcer le d√©ploiement
          az webapp deployment source config-zip \
            --resource-group laravel-rg \
            --name ${{ secrets.AZURE_APP_NAME }} \
            --src release.zip
          